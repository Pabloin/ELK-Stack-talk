input {

  file {
    path => "${ELK_HOME}/dataset/sensor-I-municipio.csv"
    # path => "/Users/pabloinchausti/Desktop/DevOps/code/github/Pabloin/ELK-Stack-talk/env1-osx/ez-data/dataset/sensor-I-municipio.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null" 
  },

  file {
    path => "${ELK_HOME}/dataset/sensor-II-hospital.csv"
    # path => "/Users/pabloinchausti/Desktop/DevOps/code/github/Pabloin/ELK-Stack-talk/env1-osx/ez-data/dataset/sensor-II-hospital.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null" 
  },

  file {
    path => "${ELK_HOME}/dataset/sensor-III-coto.csv"
    # path => "/Users/pabloinchausti/Desktop/DevOps/code/github/Pabloin/ELK-Stack-talk/env1-osx/ez-data/dataset/sensor-III-coto.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null" 
  }

}

filter {

  csv {
      separator => ","

      columns => [
        "Fecha Hora",
        "IdContainer",
        "Carga",
        "Capacidad_Carga_M3",
        "Capacidad_Ocupada_M3",
        "Capacidad_Libre_M3",
        "lat",
        "long",
        "UbicaciÃ³n"
      ]
  }

  mutate {convert => ["Carga",                  "float"]}
  mutate {convert => ["Capacidad_Carga_M3",     "float"]}
  mutate {convert => ["Capacidad_Ocupada_M3",   "float"]}
  mutate {convert => ["Capacidad_Libre_M3",     "float"]}

  # GEO Field
  mutate {
    add_field => { "[location][lat]" => "%{lat}" }
    add_field => { "[location][lon]" => "%{long}" }
  }
  mutate {
    convert   => { "[location][lat]" => "float"}
    convert   => { "[location][lon]" => "float"}
  }

  # My Timestamp
  mutate {
    add_field => { "fecha_time_stamp" => "%{Fecha Hora}" }
  }

  date {

    # If you want to have "logtimestamp" become a time object,
    #    you need to add target => "logtimestamp" to your date filter block.
    # By default, the date filter overwrites the @timestamp field with the value of the matched field,
    #    in this case, logtimestamp's value. 
    # match => [ "FECHA", "dd/MM/yyyy" ]

    # match => [ "fecha_time_stamp", "dd/MM/yyyy HH:mm:ss" ]
    #    match => [ "HORA", "HH:mm:ss" ]
    # match => [ "fecha_time_stamp", "dd/MM/yyyy" ]
    match => [ "fecha_time_stamp", "dd/MM/yyyy HH:mm:ss" ]
    target => "FECHA_HORA"
    timezone => "Etc/GMT"
  }

}

output {


  elasticsearch {
    hosts      => "${ELASTIC_xHOST}"
    user       => "${ELASTIC_xUSER}"
    password   => "${ELASTIC_xPASS}"
    index      => "sensor_full_dataeze"


    manage_template => true
    document_type => "doc_sensores"
    template      => "./dataeze-template.json"
    template_name => "dataeze-template"
    template_overwrite => true
  }   
  


  stdout { 
    codec => rubydebug 
  }

}




